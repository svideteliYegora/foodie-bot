import logging
import asyncio
import sys
import json

import aiogram.exceptions
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ChatType
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto
from aiogram.utils.keyboard import (
    InlineKeyboardBuilder,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from PIL import Image
from models import food_sdb
from datetime import datetime as dtm, timedelta

logging.basicConfig(level=logging.INFO, stream=sys.stdout)

# –ü–æ–ª—É—á–∞–µ–º config –¥–∞–Ω–Ω—ã–µ
with open("venv/config.json", "r") as json_file:
    config = json.load(json_file)

TG_TOKEN = config.get("TG_TOKEN")
SUPER_USER = config.get("SUPER_USER")
ADMINS_CHAT_ID = config.get("ADMINS_CHAT_ID")
SIZE_IMAGE_FOOD_CART = tuple(config.get("SIZE_IMAGE_FOOD_CART"))

# –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
with open("messages.json", "r") as json_file:
    data = json.load(json_file)

# –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å–≤–∏—è –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
INTRODUCTION_TEXT = data.get("introduction_text")

CATEGORIES_TEXT = data.get("categories")

# –®–∞–±–ª–æ–Ω –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –±–ª—é–¥–∞
FOOD_CART_TEXT = data.get("food_cart")

BASKET_TEXT = data.get("basket")

# –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
ERROR_EXECUTE = data.get("error_execute")

# –¢–µ–∫—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω

# –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ - user_id –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∏–∑ `user_introduction`
u_reg_questions = {}

# –°–ª–æ–≤–∞—Ä—å, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –∫–ª–∞—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –Ω–µ–º –≤ `User`.
new_user_data = {}

# –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–ª—é–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
food_cart_data = {}

# –î–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
basket_data = {}

# –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
order_data = {}


# bot
bot = Bot(token=TG_TOKEN)
dp = Dispatcher()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_kb_main_menu() -> ReplyKeyboardMarkup:
    kb_main_menu = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="üçΩÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ë–ª—é–¥")],
            [
                KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞"),
                KeyboardButton(text="üöö –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
            ],
            [
                KeyboardButton(text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"),
                KeyboardButton(text="‚ùì  –°–ø—Ä–∞–≤–∫–∞")
            ],
        ]
    )

    return kb_main_menu


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –±–ª—é–¥–∞
def get_ikb_food_cart(number1: int, number2: int, amount: int = 1) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="-1", callback_data="minus"),
        InlineKeyboardButton(text=f"{amount} —à—Ç.", callback_data="amount_dishes"),
        InlineKeyboardButton(text="+1", callback_data="plus")
    )
    builder.row(
        InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="add_to_basket")
    )
    builder.row(
        InlineKeyboardButton(text="<", callback_data="back"),
        InlineKeyboardButton(text=f"{number1}/{number2}", callback_data="dish_number"),
        InlineKeyboardButton(text=">", callback_data="next")
    )

    return builder.as_markup()


# –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä
def create_inline_keyboard(buttons: list[str], callback_prefix: str) -> InlineKeyboardMarkup:
    '''
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

    :param buttons: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–Ω–æ–ø–æ–∫.
    :param callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è callback_data. –ö–∞–∂–¥—ã–π callback_data –±—É–¥–µ—Ç –∏–º–µ—Ç—å –≤–∏–¥ "{callback_prefix}_{–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏}".
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ `InlineKeyboardMarkup` (–≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
    '''
    builder = InlineKeyboardBuilder()
    for btn_txt in buttons:
        builder.button(text=btn_txt, callback_data=f"{callback_prefix}_{btn_txt}")
    builder.adjust(1)

    return builder.as_markup()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def resize_image(image_path: str) -> None:
    """
    –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ.

    :param image_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    :return: None
    """
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(image_path)

        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        resized_image = image.resize(SIZE_IMAGE_FOOD_CART)

        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        resized_image.save(image_path, format=image.format)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@dp.message(Command("start"))
async def handle_command_start(message: Message) -> None:
    user_id = message.from_user.id

    # –ø–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ç–µ–∂ –≤—Å–µ—Ö TG –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã User –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in food_sdb.get_tg_ids():

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏—à–µ—Ç –ª–∏ –æ–Ω –∏–∑ –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
        if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
            # –µ—Å–ª–∏ —ç—Ç–æ —á–∞—Ç –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            if message.chat.id == ADMINS_CHAT_ID:
                await bot.send_message(chat_id=message.chat.id,
                                       text=INTRODUCTION_TEXT["welcome_admin"],
                                       reply_markup=None)  # –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–æ–≤
            else:
                await bot.send_message(chat_id=message.chat.id,
                                       text=INTRODUCTION_TEXT["away_message"])
        else:
            name = food_sdb.get_urecord_tg(user_id)['name']
            await message.answer(text=INTRODUCTION_TEXT["welcome_user"].format(name=name),
                                 reply_markup=get_kb_main_menu())
    else:
        u_reg_questions[user_id] = 1  # –∫–ª—é—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ `INTRODUCTION_TEXT["user_introduction"]`
        new_user_data[user_id] = {"tg_id": user_id}
        await message.answer(text=INTRODUCTION_TEXT["user_introduction"]["0"])
        await message.answer(text=INTRODUCTION_TEXT["user_introduction"]["1"])


@dp.message(F.text == "üçΩÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ë–ª—é–¥")
async def handle_food_categories(message: Message) -> None:
    # –∫–æ—Ä—Ç–µ–∂ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–ª—é–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    categories = food_sdb.get_uniq_cats()
    food_cart_data[message.from_user.id] = {"categories": categories}
    await message.answer(text=CATEGORIES_TEXT,
                         reply_markup=create_inline_keyboard(buttons=categories, callback_prefix="dbc"))


@dp.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def handle_basket(message: Message) -> None:
    user_id = message.from_user.id

    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    basket = food_sdb.get_basket_tg(user_id)
    if basket:
        # –≤—ã–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –º–µ–Ω—é
        sent_title_message = await message.answer(text=BASKET_TEXT["basket_data"]["title"])

        buffer = []  # —Å—é–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º message_id –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –ª–µ–≥–∫–æ —É–¥–∞–ª–∏—Ç—å
        order_price = 0

        # –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É –∏ –≤—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç –æ–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for num, item in enumerate(basket):
            good = item['good_id']

            photo = good['tg_image_id']
            name = good['name']
            amount = item['amount']
            price = item['total_price']

            order_price += price

            sent_message = await bot.send_photo(chat_id=user_id,
                                                photo=photo,
                                                caption=BASKET_TEXT["basket_data"]["good_text"].
                                                format(number=num+1, name=name, amount=amount, price=price),
                                                reply_markup=create_inline_keyboard(buttons=["–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ–æ–∑–∏–Ω—ã"],
                                                                                    callback_prefix=f"rfb_{num}"))
            buffer.append(sent_message.message_id)

        ikb = create_inline_keyboard(buttons=["–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"], callback_prefix="ba")

        sent_order_summary_message = await message.answer(text=BASKET_TEXT["basket_data"]["order_summary_message"].format(order_price=order_price),
                                           reply_markup=ikb)
        basket_data[user_id] = {
            "message_ids": buffer,
            "message_title_id": sent_title_message.message_id,
            "message_order_summary_id": sent_order_summary_message.message_id,
            "order_price": order_price,
            "basket_items": basket
        }
    else:
        await bot.send_message(chat_id=user_id,
                               text=BASKET_TEXT["empty_basket_message"])


@dp.message(F.text)
async def handle_text_message(message: Message) -> None:
    user_id = message.from_user.id

    # –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ `INTRODUCTION_TEXT["user_introduction"]` –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å.
    question_number = u_reg_questions.get(user_id)
    if question_number:

        if question_number == 1:
            new_user_data[user_id]['name'] = message.text
            u_reg_questions[user_id] += 1
            await message.answer(text=INTRODUCTION_TEXT["user_introduction"][str(u_reg_questions[user_id])])

        elif question_number == 2:
            try:
                new_user_data[user_id]['age'] = int(message.text)
                u_reg_questions[user_id] += 1
                await message.answer(text=INTRODUCTION_TEXT["user_introduction"][str(u_reg_questions[user_id])])
            except ValueError as e:
                await message.answer(text=INTRODUCTION_TEXT["age_error"])

        elif question_number == 3:
            new_user_data[user_id]['phone'] = message.text
            u_reg_questions[user_id] += 1
            await message.answer(text=INTRODUCTION_TEXT["user_introduction"][str(u_reg_questions[user_id])])

        elif question_number == 4:
            new_user_data[user_id]['delivery_address'] = message.text
            u_reg_questions[user_id] += 1

            # –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ----------------------------------------------------------------------------------------------
            new_user = food_sdb.add_user(**new_user_data[user_id])

            await message.answer(text=INTRODUCTION_TEXT["user_introduction"][str(u_reg_questions[user_id])])

            # —Ç.–∫. new_user —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ user (: , —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.
            del u_reg_questions[user_id]
            del new_user_data[user_id]

            await message.answer(text=INTRODUCTION_TEXT["welcome_user"].format(name=new_user['name']),
                                 reply_markup=get_kb_main_menu())


# dbc - dishes by category
@dp.callback_query(F.data.startswith("dbc"))
async def cb_handle_category(callback_query: CallbackQuery) -> None:
    current_cat = callback_query.data.split("_")[1]
    user_id = callback_query.from_user.id
    f_cart = food_cart_data[user_id]

    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `Good`, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    goods_list = food_sdb.get_goods_by_cat(current_cat)

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ –¥–ª–∏–Ω—É, –Ω–æ–º–µ—Ä –±–ª—é–¥–∞ –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ. –ò –∑–∞–Ω–æ—Å–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ `food_cart_data`
    amount = 1
    good_number = 1

    len_goods_list = len(goods_list)
    f_cart["goods_list"] = goods_list
    f_cart["len_goods_list"] = len_goods_list
    f_cart["amount"] = amount
    f_cart["good_number"] = good_number

    # –ø–µ—Ä–≤–æ–µ –±–ª—é–¥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    good = goods_list[good_number - 1]

    # –µ—Å–ª–∏ `tg_image_id` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–∑ –ø–∞–ø–∫–∏ `images` –≤ –ø—Ä–æ–µ–∫—Ç–µ.
    image = good.get('tg_image_id')
    if not image:
        # —É—Å—Ç–∞–≤–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (300, 300) –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é `resize_image`
        resize_image(good['image'])
        image = FSInputFile(good['image'])

    ikb = get_ikb_food_cart(amount=amount, number1=good_number, number2=len_goods_list)

    caption = FOOD_CART_TEXT["food_cart_text"].format(name=good['name'], price=good['price'], category=good['category'],
                                                      cooking_time=good['cooking_time'], description=good['description'],
                                                      available=("–î–∞" if good['available'] else "–ù–µ—Ç"))

    # –ü–æ–ª—É—á–∞–µ–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–æ–≤–∞—Ä—É
    good_review = food_sdb.get_five_gcomms(good['id'])
    if good_review:
        review_text = []
        for gr in good_review:
            review_text.append(
                FOOD_CART_TEXT["template_review"].format(
                    eval=gr['eval'] * "‚≠êÔ∏è",
                    name=gr["user_id"]["name"],
                    review_text=gr["text"]
                )
            )
        caption += "\n\n‚¨áÔ∏è –û—Ç–∑—ã–≤—ã ‚¨áÔ∏è\n\n" + "\n\n".join(review_text)

    if not good_review:
        caption += '\n\n*–û—Ç–∑—ã–≤—ã:*\n\n'

    sent_photo = await callback_query.bot.send_photo(chat_id=user_id, photo=image, caption=caption,
                                                     reply_markup=ikb)

    # –¥–æ–±–∞–≤–ª—è–µ–º file_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –ø–æ–ª–µ `tg_image_id` –ø—É—Å—Ç–æ–µ.
    if not good.get('tg_image_id'):

        # –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å -------------------------------------------------------------------------------------------------
        good_id = good['id']
        food_sdb.update_record('good', {'tg_image_id': sent_photo.photo[0].file_id}, id=good_id)


@dp.callback_query(F.data.in_({"minus", "plus"}))
async def cb_amount_change(callback_query: CallbackQuery) -> None:
    user_id = callback_query.from_user.id
    f_cart = food_cart_data[user_id]
    message_id = callback_query.message.message_id

    # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ 1, –µ—Å–ª–∏ data —Ä–∞–≤–µ–Ω "plus", –∏–Ω–∞—á–µ —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 1.
    # –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º max, —á—Ç–æ–±—ã –Ω–µ –¥–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
    f_cart["amount"] = f_cart["amount"] + 1 if callback_query.data == "plus" else max(
        f_cart["amount"] - 1, 1)

    ikb = get_ikb_food_cart(amount=f_cart["amount"],
                            number1=f_cart["good_number"],
                            number2=f_cart["len_goods_list"])
    try:
        await callback_query.bot.edit_message_reply_markup(chat_id=user_id, message_id=message_id, reply_markup=ikb)
    except aiogram.exceptions.TelegramBadRequest as e:
        if "message is not modified" in str(e):
            await callback_query.answer(text=FOOD_CART_TEXT["amount_goods_error"])
        else:
            raise


@dp.callback_query(F.data.in_({"back", "next"}))
async def cb_switch_goods(callback_query: CallbackQuery) -> None:
    user_id = callback_query.from_user.id
    f_cart = food_cart_data[user_id]

    if f_cart["len_goods_list"] > 1:

        # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–ª–∏ —É–º–µ–Ω—å—à–∞–µ–º –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–∞ 1 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è data.
        if callback_query.data == "next":
            f_cart["good_number"] += 1
            if f_cart["good_number"] > f_cart["len_goods_list"]:
                f_cart["good_number"] = 1
        else:
            f_cart["good_number"] -= 1
            if f_cart["good_number"] < 1:
                f_cart["good_number"] = f_cart["len_goods_list"]


        good_number = f_cart["good_number"]

        # –æ–±–Ω—É–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (–±–ª—é–¥)
        f_cart["amount"] = 1
        good = food_cart_data[user_id]["goods_list"][good_number - 1]

        image = good['tg_image_id']
        if not image:
            # —É—Å—Ç–∞–≤–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (300, 300) –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é `resize_image`
            resize_image(good['image'])
            image = FSInputFile(good['image'])

        chat_id = callback_query.from_user.id
        message_id = callback_query.message.message_id

        caption = FOOD_CART_TEXT["food_cart_text"].format(name=good['name'], price=good['price'], category=good['category'],
                                                          cooking_time=good['cooking_time'], description=good['description'],
                                                          available=("–î–∞" if good['available'] else "–ù–µ—Ç"))

        ikb = get_ikb_food_cart(amount=f_cart["amount"],
                                number1=f_cart["good_number"],
                                number2=f_cart["len_goods_list"])

        media_photo = InputMediaPhoto(media=image, caption=caption)
        sent_photo = await callback_query.bot.edit_message_media(chat_id=chat_id, message_id=message_id, media=media_photo,
                                                                 reply_markup=ikb)
        # –¥–æ–±–∞–≤–ª—è–µ–º file_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –ø–æ–ª–µ `tg_image_id` –ø—É—Å—Ç–æ–µ.
        if not good.get('tg_image_id'):
            good_id = good['id']

            # –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å -------------------------------------------------------------------------------------------------
            g = food_sdb.update_record("good", {"tg_image_id": sent_photo.photo[0].file_id}, id=good_id)


@dp.callback_query(F.data == "add_to_basket")
async def cb_add_to_basket(callback_query: CallbackQuery) -> None:
    f_cart = food_cart_data[callback_query.from_user.id]
    good_number = f_cart["good_number"]
    user_id = callback_query.from_user.id
    current_good = f_cart["goods_list"][good_number - 1]

    # –ø–æ–ª—É—á–∞–µ–º –∫–æ—Ä—Ç–µ–∂ —Å –æ–±—â–∏–º –∫–æ–ª–∏–∏—á–µ—Å—Ç–≤–æ–º –∏ –ø—Ä–∞–π—Å–æ–º (amount, total_price) –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    basket_entry = food_sdb.union_basket_entries_tg(user_id, current_good['id'])

    # —É–¥–∞–ª—è–µ–º –≤—Å–∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ç–æ–≤–∞—Ä–æ–º (good_id)
    u_id = food_sdb.get_urecord_tg(user_id)
    food_sdb.delete_all_records('basket', good_id=current_good['id'], user_id=u_id['id'])


    total_amount = 0
    total_price = 0
    if basket_entry:
        total_amount += basket_entry[0]
        total_price += basket_entry[1]

    # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–≤–ø–∏—Å—å –≤ `Baskets`
    basket = food_sdb.add_record('basket', amount=f_cart["amount"] + total_amount,
                                 total_price=f_cart["amount"] * current_good["price"] + total_price,
                                 user_id=food_sdb.get_urecord_tg(user_id)["id"], good_id=current_good["id"])
    f_cart["amount"] = 1

    try:
        await callback_query.bot.edit_message_reply_markup(chat_id=user_id,
                                                           message_id=user_id,
                                                           reply_markup=get_ikb_food_cart(
                                                               number1=good_number,
                                                               number2=f_cart["len_goods_list"],
                                                               amount=f_cart["amount"]
                                                           ))
    except Exception as e:
        pass

    await callback_query.answer(text=FOOD_CART_TEXT["basket_add_success"])


# rfb - remove from basket
@dp.callback_query(F.data.startswith("rfb"))
async def cb_remove_from_basket(callback_query: CallbackQuery) -> None:
    user_id = callback_query.from_user.id
    user_basket_dt = basket_data[user_id]

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ callback_data
    num = int(callback_query.data.split("_")[1])

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º num –∫–∞–∫ –∏–Ω–¥–µ–∫—Å
    basket_item = user_basket_dt["basket_items"][num]
    message_id = user_basket_dt["message_ids"].pop(num)

    # —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–¥–∞–ª—è–µ–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    price = basket_item['total_price']

    # —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤ `Basket`
    del_g = food_sdb.delete_record('basket', id=basket_item['id'])
    print(del_g)
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ—â–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º
    await bot.delete_message(chat_id=user_id, message_id=message_id)

    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
    user_basket_dt["order_price"] -= price

    if user_basket_dt["message_ids"]:
        await callback_query.bot.edit_message_text(text=BASKET_TEXT["basket_data"]["order_summary_message"].
                                                   format(order_price=user_basket_dt["order_price"]),
                                                   chat_id=user_id,
                                                   message_id=user_basket_dt["message_order_summary_id"],
                                                   reply_markup=user_basket_dt["ikb"])
    else:
        await bot.delete_message(chat_id=user_id, message_id=user_basket_dt["message_title_id"])
        await callback_query.bot.edit_message_text(text=BASKET_TEXT["empty_basket_message"],
                                                   chat_id=user_id,
                                                   message_id=user_basket_dt["message_order_summary_id"])


# ba - basket action
@dp.callback_query(F.data.startswith("ba"))
async def cb_basket_action(callback_query: CallbackQuery) -> None:
    user_id = callback_query.from_user.id
    message_id = callback_query.message.message_id

    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    u = food_sdb.get_urecord_tg(user_id)

    u_basket_dt = basket_data[user_id]
    cb_data = callback_query.data.split("_")[1]

    if cb_data == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑":
        text = BASKET_TEXT["confirmation_message"].format(name=u['name'], age=u['age'], phone=u['phone'], address=u['delivery_address'])
        ikb = create_inline_keyboard(buttons=["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"], callback_prefix="ba")
        await callback_query.bot.edit_message_text(chat_id=user_id,
                                                   message_id=callback_query.message.message_id,
                                                   text=text,
                                                   reply_markup=ikb)

    elif cb_data == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É":

        await bot.delete_message(chat_id=user_id, message_id=u_basket_dt['message_title_id'])
        u_basket_dt["order_price"] = 0
        for message_id in u_basket_dt["message_ids"]:
            await bot.delete_message(chat_id=user_id, message_id=message_id)
        u_basket_dt["message_ids"].clear()
        for bi in u_basket_dt["basket_items"]:
            food_sdb.delete_record('basket', id=bi['id'])

        await callback_query.bot.edit_message_text(chat_id=user_id,
                                                   message_id=callback_query.message.message_id,
                                                   text=BASKET_TEXT["empty_basket_message"])

    elif cb_data == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        order_data[user_id] = {}
        buttons = ["–ö–∞—Ä—Ç–æ–π", "–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏"]
        await callback_query.bot.edit_message_text(chat_id=user_id,
                                                   message_id=callback_query.message.message_id,
                                                   text="–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                                                   reply_markup=create_inline_keyboard(buttons, "ba"))

    elif cb_data in ("–ö–∞—Ä—Ç–æ–π", "–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏"):
        # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        mx_cooking_t = max([i["good_id"]["cooking_time"] for i in u_basket_dt["basket_items"]])

        # –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
        dtn = dtm.now()

        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä—ã –∏ –ø–æ–ª—É—á–∞–µ–º –∏—Ö
        ord_recs = food_sdb.add_ords_tg(
            ord_tm=dtn,
            deliv_tm=dtn + timedelta(minutes=int(mx_cooking_t) + 30),
            ord_p=u_basket_dt["order_price"],
            status="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
            pay_m=cb_data,
            user_id=user_id,
        )

        # –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ Basket
        food_sdb.delete_all_records("basket", id=u_basket_dt["basket_items"][0]["user_id"]["id"])

        # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å id —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        del_mess_ids = u_basket_dt["message_ids"]
        del_mess_ids.append(u_basket_dt["message_title_id"])

        # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ
        for m_id in del_mess_ids:
            await callback_query.bot.delete_message(chat_id=user_id, message_id=m_id)

        # —É–¥–∞–ª—è–µ–º —ç–ª–ª–µ–º–µ–Ω—Ç —Å–ª–æ–≤–∞—Ä—è —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∫–æ—Ä–∑–∏–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del basket_data[user_id]

        # —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —á–µ–∫–∞
        gs_list = [f"–ù–∞–∑–≤–∞–Ω–∏–µ: {bi['good_id']['name']}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {bi['amount']}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {bi['total_price']}" for bi in u_basket_dt["basket_items"]]

        # –≤—ã–≤–æ–¥–∏–º —á–µ–∫
        text = BASKET_TEXT["checkout_receipt"].format(datetime=dtn.strftime("%Y-%m-%d %H:%M"),
                                                      order_number=ord_recs[0]["order_number"],
                                                      )
        await callback_query.bot.edit_message_text(text=BASKET_TEXT["checkout_receipt"])
